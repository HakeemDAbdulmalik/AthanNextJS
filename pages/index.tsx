import Head from 'next/head'
import Image from 'next/image'
import { Inter } from '@next/font/google'
import styles from '../styles/Home.module.css'
import { DropDownOption } from '../components/dropdownoption'
import { submitForm, displayMeta } from '../components/submitForm'
import React, { useState, useEffect } from 'react'
import { constants } from 'fs/promises'
import { executionAsyncId } from 'async_hooks'
import { map } from 'underscore'

// Create data structure for all of the display settings
// Look into useRedux hook to start holding data

// Create a cookie to hold the data 
// People who want the data to persist

// Create a printable format 


const inter = Inter({ subsets: ['latin'] })

function onChangeHandler (e:any , updateState:any) {
    updateState(`${e.target.value}&`);
}

export default function Home() {
  const [methodValue, setMethodValue] = useState("2");
  const [city, setCity] = useState("NewYork");
  const [country, setCountry] = useState("US");
  const [state, setState] = useState("NY");
  const [month, setMonth] = useState( 1 );
  const [year, setYear] = useState( 2023 );
  const [annual, setAnnual] = useState( false );
  const [iso8601, setIso8601] = useState( true );
  const [callRes, setCallRes]: any = useState([]);


  const [metaData, setMetaData] = useState([]);
  // const [] = useState(" ");

  function submitClicked(event) {
    event?.preventDefault();
    submitForm({city, country, state, month, year, annual, iso8601})
    .then(data => {
      setCallRes(data);
    })
    .catch(error => {
      console.log('submoitClicked did not work');
      
    });
  }

  useEffect(() => {
    if (callRes[0] !== undefined) {

      displayMeta(callRes[0], setMetaData);
    }
  }, [callRes]);

  useEffect(() => {
    console.log("This is metaData", metaData);
    
  }, [metaData])
  
  const methods = {
    optionName: "method",
    label: "Method",
    values: [
      {value: 1, valueOption: "University of Islamic Sciences, Karachi"},
      {value: 2, valueOption: "Islamic Society of North America"},
      {value: 3, valueOption: "Muslim World League"},
      {value: 4, valueOption: "Umm Al-Qura University, Makkah"},
      {value: 5, valueOption: "Egyptian General Authority of Survey"},
      {value: 7, valueOption: "Institute of Geophysics, University of Tehran"},
      {value: 8, valueOption: "Gulf Region"},
      {value: 9, valueOption: "Kuwait"},
      {value: 10, valueOption: "Qatar"},
      {value: 11, valueOption: "Majlis Ugama Islam Singapura, Singapore"},
      {value: 12, valueOption: "Union Organization islamic de France"},
      {value: 13, valueOption: "Diyanet İşleri Başkanlığı, Turkey"},
      {value: 14, valueOption: "Spiritual Administration of Muslims of Russia"},
      {value: 15, valueOption: "Moonsighting Committee Worldwide (also requires shafaq paramteer)"},
    ],
    eventHandler: (event: React.ChangeEvent<HTMLInputElement>): void => {
      if (event.target.value) {
        setMethodValue(event.target.value);
      }
    }
  }
  
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />

      </Head>
      <main>
        <div>
          <form>
            Current state value : {methodValue} <br/>
            <DropDownOption optionMenu={methods}></DropDownOption>
            <label htmlFor="city">City</label>
            <input type="text" id="city" name="city" value={city} onChange={event => onChangeHandler(event, setCity)} /><br/>

            <label htmlFor="country">Country</label>
            <input type="text" id="country" name="country" value={country} onChange={event => onChangeHandler(event, setCountry)} /><br/>

            <label htmlFor="state">State</label>
            <input type="text" id="state" name="state" value={state} onChange={event => onChangeHandler(event, setState)}/><br/>

            <label htmlFor="month">Month</label>
            <input type="number" id="month" name="month" value={month} onChange={event => onChangeHandler(event, setMonth)}/><br/>

            <label htmlFor="year">Year</label>
            <input type="number" id="year" name="year" value={year} onChange={event => onChangeHandler(event, setYear)}/><br/>

            <input type="radio" id="annualYes" name="annual" value="true" onChange={event => onChangeHandler(event, setAnnual)}/>
            <label htmlFor="annualYes">Yes</label>
            <input type="radio" id="annualNo" name="annual" value="false" defaultChecked onChange={event => onChangeHandler(event, setAnnual)}/>
            <label htmlFor="annualNo">No</label><br/>
          
            <input type="radio" id="iso8601T" name="iso8601" value="true" onChange={event => onChangeHandler(event, setIso8601)}/>
            <label htmlFor="iso8601">iso8601 True</label><br/>
            <input type="radio" id="iso8601F" name="iso8601" value="false" onChange={event => onChangeHandler(event, setIso8601)}/>
            <label htmlFor="iso8601">iso8601 False</label><br/>

            <input type="submit" value="Submit" onClick={submitClicked} className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-full"/>
          </form>

          <div>
            <div> 
              {
                map(metaData, (data) => (
                 console.log(data)

                //  https://www.geeksforgeeks.org/flatten-javascript-objects-into-a-single-depth-object/
                 // The solution will require some type of recursion
                 // Look through each obj to see if it is worth building
                 // or if just writing everything in manually is worth doing
                 
                ))
              }
            </div>

            {
              
              callRes.map((data: any, index: number) => (
                // display all of the data that gets updated
                // all other data should be displayed chronologically
                <p key={index}>
                 {
                  JSON.stringify(data)
                 }
                </p>
              ))
            }
          </div>
        </div>
      </main>
    </>
  )
}
